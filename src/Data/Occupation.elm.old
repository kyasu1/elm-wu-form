module Data.Occupation exposing (..)

import Json.Decode as D
import Json.Encode as E


type Occupation
    = Employee
    | Unemployed
    | Retired
    | Student
    | Teacher
    | Housewife


default : Occupation
default =
    Employee


encode : Occupation -> E.Value
encode v =
    E.string <| toString v


toString : Occupation -> String
toString v =
    case v of
        Employee ->
            "Employee/会社員"

        Unemployed ->
            "Unemployed/休職中"

        Retired ->
            "Retired/定年退職者"

        Student ->
            "Student/学生"

        Teacher ->
            "Student/教職"

        Housewife ->
            "Housewife/主婦"


decoder : D.Decoder Occupation
decoder =
    D.string
        |> D.andThen
            (\s ->
                case parse s of
                    Ok o ->
                        D.succeed o

                    Err err ->
                        D.fail err
            )


parse : String -> Result String Occupation
parse s =
    case List.filter (\( _, l ) -> l == s) list |> List.head of
        Just ( v, _ ) ->
            Ok v

        Nothing ->
            Err ("Invalid Ocupation: " ++ s)


list : List ( Occupation, String )
list =
    [ ( Employee, "Employee/会社員" )
    , ( Unemployed, "Unemployed/休職中" )
    , ( Retired, "Retired/定年退職者" )
    , ( Student, "Student/学生" )
    , ( Teacher, "Teacher/教職" )
    , ( Housewife, "Housewife/主婦" )
    ]
